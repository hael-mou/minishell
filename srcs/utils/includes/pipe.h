/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipe.h                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hael-mou <hael-mou@student.1337.ma>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/07/13 18:17:17 by oezzaou           #+#    #+#             */
/*   Updated: 2023/07/26 23:55:42 by hael-mou         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PIPE_H
# define PIPE_H

/*###############################################################
#		* Includes :		    							 	#
###############################################################*/
# include <unistd.h>

/*###############################################################
#		* Define :		    								 	#
###############################################################*/
# define FAILURE 0
# define SUCCESS 1
# define TRUE 1
# define FALSE 0

/*###############################################################
#		* _pipeline :		    							 	#
###############################################################*/
typedef struct s_pipeline
{
	int		fd[2];
	int		offset;
}	t_pipeline;

/*###############################################################
#		* Functions :		    							 	#
###############################################################*/
int		create_pipe(t_pipeline *pipeline, int boolval);
int		update_pipeline(t_pipeline *pipeline);
void	close_pipe(int *pipe);

#endif
